// Generated by CoffeeScript 1.10.0
(function() {
  var HttpClient, MRT, Parser, Tmp;

  HttpClient = require('scoped-http-client');

  Parser = require('cheerio');

  Tmp = require('tmp');

  MRT = (function() {
    function MRT(server) {
      this.server = server;
      this.cache = {};
    }

    MRT.prototype.month = function() {
      var date;
      date = new Date();
      return date.getUTCFullYear().toString() + '.' + ('0' + (date.getUTCMonth() + 1)).slice(-2);
    };

    MRT.prototype.indexUrl = function(month) {
      return "http://archive.routeviews.org/route-views." + this.server + "/bgpdata/" + (this.month()) + "/RIBS/";
    };

    MRT.prototype.lastFileUrl = function(errorHandler, callback) {
      var url;
      url = this.indexUrl();
      return HttpClient.create(url).get()(function(err, res, body) {
        var $;
        if (err) {
          errorHandler(err);
          return;
        }
        if (res.statusCode !== 200) {
          errorHandler("Bad HTTP response: " + res.statusCode);
          return;
        }
        $ = Parser.load(body);
        return callback(url + $('a').last().attr('href'));
      });
    };

    MRT.prototype.get = function(messageHandler, callback) {
      var timeout;
      timeout = process.env.MRT_CACHE_TIMEOUT || 86400000;
      if (this.cache.date && new Date() - this.cache['date'] < timeout) {
        callback(this.cache.path);
        return;
      }
      messageHandler("Fresh MRT is not found");
      return this.lastFileUrl(messageHandler, (function(_this) {
        return function(url) {
          messageHandler("Downloading " + url + " ... please wait");
          return HttpClient.create(url, {
            encoding: 'binary'
          }).get()(function(err, res, body) {
            if (err) {
              messageHandler(err);
              return;
            }
            if (res.statusCode !== 200) {
              messageHandler("Bad HTTP response: " + res.statusCode);
              return;
            }
            return _this.write(body, url, messageHandler, function(path) {
              _this.cache.date = new Date();
              _this.cache.path = path;
              messageHandler("Saved as " + path);
              return callback(path);
            });
          });
        };
      })(this));
    };

    MRT.prototype.write = function(content, url, errorHandler, callback) {
      var ext, path;
      path = require('path');
      ext = path.extname(url);
      return Tmp.file({
        postfix: ext
      }, function(err, path, fd, cleanupCallback) {
        var fs;
        if (err) {
          errorHandler(err);
          return;
        }
        fs = require('fs');
        return fs.writeFile(path, content, 'binary', function(err) {
          if (err) {
            errorHandler(err);
            return;
          }
          return callback(path);
        });
      });
    };

    return MRT;

  })();

  module.exports = MRT;

}).call(this);
